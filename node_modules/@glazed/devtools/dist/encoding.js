import { CID } from 'multiformats/cid';
import { fromString, toString } from 'uint8arrays';
import { applyMap } from './utils.js';
/** @internal */ export function decodeDagJWS({ payload , signatures , link  }) {
    return {
        payload,
        signatures,
        link: link ? CID.parse(link) : undefined
    };
}
/** @internal */ export function encodeDagJWS({ payload , signatures , link  }) {
    return {
        payload,
        signatures,
        link: link?.toString()
    };
}
/** @internal */ export function decodeDagJWSResult({ jws , linkedBlock  }) {
    return {
        jws: decodeDagJWS(jws),
        linkedBlock: fromString(linkedBlock, 'base64pad')
    };
}
/** @internal */ export function encodeDagJWSResult({ jws , linkedBlock  }) {
    return {
        jws: encodeDagJWS(jws),
        linkedBlock: toString(linkedBlock, 'base64pad')
    };
}
/** @internal */ export function decodeSignedMap(data) {
    return applyMap(data, (records)=>records.map(decodeDagJWSResult)
    );
}
/** @internal */ export function encodeSignedMap(data) {
    return applyMap(data, (records)=>records.map(encodeDagJWSResult)
    );
}
/** @internal */ export function decodeEntryCommits(entry) {
    return {
        ...entry,
        commits: entry.commits.map(decodeDagJWSResult)
    };
}
/** @internal */ export function decodeModel(model) {
    return {
        schemas: applyMap(model.schemas, (schema)=>{
            return {
                ...schema,
                commits: schema.commits.map(decodeDagJWSResult)
            };
        }),
        definitions: applyMap(model.definitions, decodeEntryCommits),
        tiles: applyMap(model.tiles, decodeEntryCommits)
    };
}
/** @internal */ export function encodeEntryCommits(entry) {
    return {
        ...entry,
        commits: entry.commits.map(encodeDagJWSResult)
    };
}
/** @internal */ export function encodeModel(model) {
    return {
        schemas: applyMap(model.schemas, (schema)=>{
            return {
                ...schema,
                commits: schema.commits.map(encodeDagJWSResult)
            };
        }),
        definitions: applyMap(model.definitions, encodeEntryCommits),
        tiles: applyMap(model.tiles, encodeEntryCommits)
    };
}
